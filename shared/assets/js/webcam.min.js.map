{"version":3,"sources":["webcam.js"],"names":["navigator","getMedia","getUserMedia","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","window","hasUserMedia","angular","module","directive","template","restrict","replace","transclude","scope","onError","onStream","onStreaming","placeholder","config","link","$scope","element","videoElem","videoStream","_removeDOMElement","DOMel","remove","onDestroy","checker","getVideoTracks","tracks","stop","src","onSuccess","stream","mozSrcObject","vendorURL","URL","webkitURL","createObjectURL","play","video","onFailure","err","console","log","startWebcam","document","createElement","setAttribute","append","isStreaming","width","videoWidth","height","code","msg","mediaConstraint","audio","min","ideal","max","facingMode","exact","addEventListener","scale","videoHeight","stopWebcam","$on"],"mappings":"AAQA,cAEA,WAGAA,UAAAC,SAAAD,UAAAE,cACAF,UAAAG,oBACAH,UAAAI,iBACAJ,UAAAK,eAGAC,OAAAC,aAAA,WACA,QAAAP,UAAAC,aAIAO,QAAAC,OAAA,aACAC,UAAA,SAAA,WACA,OACAC,SAAA,2CACAC,SAAA,IACAC,SAAA,EACAC,YAAA,EACAC,OAEAC,QAAA,IACAC,SAAA,IACAC,YAAA,IACAC,YAAA,IACAC,OAAA,YAEAC,KAAA,SAAAC,EAAAC,GACA,GAAAC,GAAA,KACAC,EAAA,KACAN,EAAA,IAEAG,GAAAF,OAAAE,EAAAF,UAEA,IAAAM,GAAA,SAAAC,GACAA,GACAnB,QAAAe,QAAAI,GAAAC,UAIAC,EAAA,WACA,GAAAJ,EAAA,CACA,GAAAK,GAAA,kBAAAL,GAAAM,cACA,IAAAN,EAAAM,gBAAAD,EAAA,CAMA,GAAAE,GAAAP,EAAAM,gBACAC,IAAAA,EAAA,IAAAA,EAAA,GAAAC,MACAD,EAAA,GAAAC,WAEAR,GAAAQ,MAEAR,EAAAQ,OAGAT,SACAA,GAAAU,KAKAC,EAAA,SAAAC,GAIA,GAHAX,EAAAW,EAGApC,UAAAI,gBACAoB,EAAAa,aAAAD,MACA,CACA,GAAAE,GAAAhC,OAAAiC,KAAAjC,OAAAkC,SACAhB,GAAAU,IAAAI,EAAAG,gBAAAL,GAIAZ,EAAAkB,OACApB,EAAAF,OAAAuB,MAAAnB,EAGAF,EAAAL,UACAK,EAAAL,UAAAmB,OAAAA,KAKAQ,EAAA,SAAAC,GACAnB,EAAAP,GACA2B,SAAAA,QAAAC,KACAD,QAAAC,IAAA,gCAAAF,GAIAvB,EAAAN,SACAM,EAAAN,SAAA6B,IAAAA,KAMAG,EAAA,WACAxB,EAAAyB,SAAAC,cAAA,SACA1B,EAAA2B,aAAA,QAAA,eACA3B,EAAA2B,aAAA,WAAA,IACA5B,EAAA6B,OAAA5B,GAEAF,EAAAH,cACAA,EAAA8B,SAAAC,cAAA,OACA/B,EAAAgC,aAAA,QAAA,iBACAhC,EAAAe,IAAAZ,EAAAH,YACAI,EAAA6B,OAAAjC,GAIA,IAAAkC,IAAA,EACAC,EAAA/B,EAAA+B,MAAAhC,EAAAF,OAAAmC,YAAA,IACAC,EAAAjC,EAAAiC,OAAA,CAGA,KAAAlD,OAAAC,eAEA,WADAqC,IAAAa,MAAA,EAAAC,IAAA,0CAIA,IAAAC,IACAC,OAAA,EACAjB,OACAW,OAAAO,IAAA,IAAAC,MAAA,IAAAC,IAAA,KACAP,QAAAK,IAAA,IAAAC,MAAA,IAAAC,IAAA,KACAC,YAAAC,MAAA,gBAIAjE,WAAAC,SAAA0D,EAAAxB,EAAAS,GAKApB,EAAA0C,iBAAA,UAAA,WACA,IAAAb,EAAA,CACA,GAAAc,GAAAb,EAAA9B,EAAA+B,UACAC,GAAAhC,EAAA4C,YAAAD,GACA7C,EAAAF,OAAAgD,YACA5C,EAAA2B,aAAA,QAAAG,GACA9B,EAAA2B,aAAA,SAAAK,GACAH,GAAA,EAEA/B,EAAAF,OAAAuB,MAAAnB,EAEAE,EAAAP,GAGAG,EAAAJ,aACAI,EAAAJ,iBAGA,IAGAmD,EAAA,WACAxC,IACAL,EAAAI,SAGAN,GAAAgD,IAAA,WAAAzC,GACAP,EAAAgD,IAAA,eAAAtB,GACA1B,EAAAgD,IAAA,cAAAD,GAEArB","file":"webcam.min.js","sourcesContent":["/**\n * Webcam Directive\n *\n * (c) Jonas Hartmann http://jonashartmann.github.io/webcam-directive\n * License: MIT\n *\n * @version: 3.1.0\n */\n'use strict';\n\n(function() {\n  // GetUserMedia is not yet supported by all browsers\n  // Until then, we need to handle the vendor prefixes\n  navigator.getMedia = ( navigator.getUserMedia ||\n                       navigator.webkitGetUserMedia ||\n                       navigator.mozGetUserMedia ||\n                       navigator.msGetUserMedia);\n\n  // Checks if getUserMedia is available on the client browser\n  window.hasUserMedia = function hasUserMedia() {\n    return navigator.getMedia ? true : false;\n  };\n})();\n\nangular.module('webcam', [])\n  .directive('webcam', function () {\n    return {\n      template: '<div class=\"webcam\" ng-transclude></div>',\n      restrict: 'E',\n      replace: true,\n      transclude: true,\n      scope:\n      {\n        onError: '&',\n        onStream: '&',\n        onStreaming: '&',\n        placeholder: '=',\n        config: '=channel'\n      },\n      link: function postLink($scope, element) {\n        var videoElem = null,\n            videoStream = null,\n            placeholder = null;\n\n        $scope.config = $scope.config || {};\n\n        var _removeDOMElement = function _removeDOMElement(DOMel) {\n          if (DOMel) {\n            angular.element(DOMel).remove();\n          }\n        };\n\n        var onDestroy = function onDestroy() {\n          if (!!videoStream ) {\n            var checker = typeof videoStream.getVideoTracks === 'function';\n            if(videoStream.getVideoTracks && checker) {\n              // get video track to call stop in it\n              // videoStream.stop() is deprecated and may be removed in the\n              // near future\n              // ENSURE THIS IS CHECKED FIRST BEFORE THE FALLBACK\n              // videoStream.stop()\n              var tracks = videoStream.getVideoTracks();\n              if (tracks && tracks[0] && tracks[0].stop) {\n                tracks[0].stop();\n              }\n            } else if (videoStream.stop) {\n              // deprecated, may be removed in the near future\n              videoStream.stop();\n            }\n          }\n          if (!!videoElem) {\n            delete videoElem.src;\n          }\n        };\n\n        // called when camera stream is loaded\n        var onSuccess = function onSuccess(stream) {\n          videoStream = stream;\n\n          // Firefox supports a src object\n          if (navigator.mozGetUserMedia) {\n            videoElem.mozSrcObject = stream;\n          } else {\n            var vendorURL = window.URL || window.webkitURL;\n            videoElem.src = vendorURL.createObjectURL(stream);\n          }\n\n          /* Start playing the video to show the stream from the webcam */\n          videoElem.play();\n          $scope.config.video = videoElem;\n\n          /* Call custom callback */\n          if ($scope.onStream) {\n            $scope.onStream({stream: stream});\n          }\n        };\n\n        // called when any error happens\n        var onFailure = function onFailure(err) {\n          _removeDOMElement(placeholder);\n          if (console && console.log) {\n            console.log('The following error occured: ', err);\n          }\n\n          /* Call custom callback */\n          if ($scope.onError) {\n            $scope.onError({err:err});\n          }\n\n          return;\n        };\n\n        var startWebcam = function startWebcam() {\n          videoElem = document.createElement('video');\n          videoElem.setAttribute('class', 'webcam-live');\n          videoElem.setAttribute('autoplay', '');\n          element.append(videoElem);\n\n          if ($scope.placeholder) {\n            placeholder = document.createElement('img');\n            placeholder.setAttribute('class', 'webcam-loader');\n            placeholder.src = $scope.placeholder;\n            element.append(placeholder);\n          }\n\n          // Default variables\n          var isStreaming = false,\n            width = element.width = $scope.config.videoWidth || 320,\n            height = element.height = 0;\n\n          // Check the availability of getUserMedia across supported browsers\n          if (!window.hasUserMedia()) {\n            onFailure({code:-1, msg: 'Browser does not support getUserMedia.'});\n            return;\n          }\n\n          var mediaConstraint = { \n              audio: false,\n              video: { \n                    width: { min: 320, ideal: 500, max: 500 },\n                    height: { min: 320, ideal: 500, max: 500 }, \n                    facingMode: { exact: \"environment\" }\n            }\n          };\n          \n          navigator.getMedia(mediaConstraint, onSuccess, onFailure);\n\n          /* Start streaming the webcam data when the video element can play\n           * It will do it only once\n           */\n          videoElem.addEventListener('canplay', function() {\n            if (!isStreaming) {\n              var scale = width / videoElem.videoWidth;\n              height = (videoElem.videoHeight * scale) ||\n                        $scope.config.videoHeight;\n              videoElem.setAttribute('width', width);\n              videoElem.setAttribute('height', height);\n              isStreaming = true;\n\n              $scope.config.video = videoElem;\n\n              _removeDOMElement(placeholder);\n\n              /* Call custom callback */\n              if ($scope.onStreaming) {\n                $scope.onStreaming();\n              }\n            }\n          }, false);\n        };\n\n        var stopWebcam = function stopWebcam() {\n          onDestroy();\n          videoElem.remove();\n        };\n\n        $scope.$on('$destroy', onDestroy);\n        $scope.$on('START_WEBCAM', startWebcam);\n        $scope.$on('STOP_WEBCAM', stopWebcam);\n\n        startWebcam();\n\n      }\n    };\n  });\n"]}